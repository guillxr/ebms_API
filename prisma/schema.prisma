generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  role     Role
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  admin Admin? @relation("AdminUser")
  donor Donor? @relation("DonorUser")
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("AdminUser", fields: [userId], references: [id])
}

model Donor {
  id                  String              @id @default(uuid())
  userId              String              @unique
  user                User                @relation("DonorUser", fields: [userId], references: [id])
  name                String
  birth_date          DateTime
  blood_type          BloodType
  gender              Gender
  phone               String
  identity_document   String              @unique
  address             String
  latitude            Float?
  longitude           Float?
  last_donation       DateTime?
  donation_history    DateTime[]          @default([])
  donation_frequency  Int                 @default(0)
  eligibility_status  Boolean             @default(false)
  contact_preferences ContactPreference[] @default([])
  registration_date   DateTime            @default(now())
  update_date         DateTime            @updatedAt

  @@index([blood_type])
  @@index([eligibility_status])
  @@index([latitude, longitude])
}

model BlType {
  id        Int    @id @default(autoincrement())
  type      String @unique
  received  Int    @default(0)
  sent      Float  @default(0)
  shortTime Int    @default(20)
  longTime  Int    @default(0)
}

enum Role {
  ADMIN
  DONOR
}

enum BloodType {
  A_POSITIVO  @map("A+")
  A_NEGATIVO  @map("A-")
  B_POSITIVO  @map("B+")
  B_NEGATIVO  @map("B-")
  AB_POSITIVO @map("AB+")
  AB_NEGATIVO @map("AB-")
  O_POSITIVO  @map("O+")
  O_NEGATIVO  @map("O-")
}

enum Gender {
  Masculino
  Feminino
  Outro
}

enum ContactPreference {
  email
  sms
  whatsapp
  call
}

model Locality {
  id           Int    @id @default(autoincrement())
  street       String
  neighborhood String
  zip          String
  city         String
  state        String
}

model Validity {
  id            String   @id @default(uuid())
  batch         String   @unique
  quantity      Int
  expirationDate DateTime
  status        String   @default("available")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Stock {
  id             Int      @id @default(autoincrement())
  lote           String
  quantidade     Int
  validade       DateTime
  status         String
}

enum status {
  disponivel
  vencido
  com_problema
}